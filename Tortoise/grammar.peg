start =
  s:statements

ws = 
  [ \t\n]*


statements = statement*

statement
    = 
     "define " ws v:identifier ws 
        "(" ws ")" ws "{" ws body:statements ws "}" ws
        { return { tag:"define", name:v, args:[], body:body }; }
   / "define " ws v:identifier ws 
        "(" ws args:ident_list ws ")" ws
        "{" ws body:statements ws "}" ws
        { return { tag:"define", name:v, args:args, body:body }; }
   / v:identifier ws ":=" ws expr:expression ws ";" ws
        {return { tag:":=", left:v, right:expr }; }
   / ws 'var' ws v:identifier";" ws
        {return {tag:'var', name: v};}
   / "if" ws "(" ws expr:expression ws ")" ws "{"
        ws i:statements ws "}" ws "{" ws e:statements ws "}"  ws
        {return {tag:'if', expression:expr, i:i, e:e};}
    / "if" ws "(" ws expr:expression ws ")" ws "{"
       ws i:statements ws "}" ws 
       {return {tag:'if', expression:expr, i:i};}
   / "repeat" ws "(" ws expr:expression ws ")" ws "{" 
        ws body:statements ws "}" ws
        {return {tag:'repeat', expression:expr, body:body };}
   / expr:expression ws ";" ws
        { return { tag:"ignore", body:expr }; }
   / expression

expression 
   = 
    expr:comparative
      {return expr;}

comparative_op = "<" / ">"/ "!=" / "==" / "<=" / ">="

comparative 
   =
     left:additive ws op:comparative_op ws right:comparative
       {return {tag:op, left:left, right:right};}
   / additive
   

additive_op = "+"/ "-"

additive 
  = 
    left:multiplicative ws op:additive_op ws right:additive
      {return {tag:op, left:left, right:right};}
  / multiplicative

multiplicative_op = "*" / "/"

multiplicative 
    =
      left:primary ws op:multiplicative_op ws right:multiplicative
        {return {tag:op, left:left, right:right};}
    / primary

primary
    = 
    number
    / v:identifier "(" ws ")"
        { return {tag:"call", name:v, args:[]}; }
    / v:identifier "(" ws args:arglist ws ")"
        { return {tag:"call", name:v, args:args}; }
    / "(" ws expr:expression ws ")"
        { return expr; }
    / chars:identifier
        {return {tag:"ident", name:chars};}


number_frac 
   =
    "." chars:[0-9]*
        { return "." + chars.join(''); }

number 
   =
    neg: "-"? chars:[0-9]+ frac:number_frac?
        {return neg? parseFloat(neg + chars.join('') + frac) : parseFloat(chars.join('') + frac); }

arglist
   = 
    first:expression rest:comma_expression*
      { return [first].concat(rest); }

identifier 
   =
    firstchar:validfirstchar chars:validchar*
      { return firstchar + chars.join(''); }

ident_list
   = 
    first:identifier rest:comma_identifier*
      { return [first].concat(rest); }

comma_identifier 
   = 
    "," ws v:identifier
      { return v; }

comma_expression 
   = 
    "," ws expr:expression
        { return expr; }

validfirstchar 
   =
     [a-zA-Z_]

validchar 
   =
     [0-9a-zA-Z_]
